#include <map>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <iterator>
#include <string>
#include <math.h>
#include <cmath>
#include <algorithm>
#include "boost/algorithm/string.hpp"
#include "linear_regression.h" 


double mean(std::vector<double> y, int begin, int end, int naverage){
	double sum = 0;
	for(int i = begin; i <= end; i++)
		sum += y[i];
	return (sum / naverage);
}

double mean(std::vector<double> y, int begin, int end){
	double sum = 0;
	int count = 0; 
	for(int i = begin; i <= end; i++) {
		sum += y[i];
		count ++ ; 
	}
	return (sum / count);
}

std::vector<double> smooth_mean(std::vector<double> vec, int naverage) {
	std::vector<double> nvec ; 
	int size_nvec = 0 ; 
	for (int i = 0; i < vec.size(); i++) {
		nvec.push_back(vec[i]) ; 
	}
	for (int i = 1; i <= vec.size(); i++) {
		if (i % naverage == 0) { // is a multiple 
			double m = mean(vec, (i-naverage+1)-1, i-1, naverage) ; 
			for (int j = i-naverage+1; j <= i; j++){
				nvec[j-1] = m ; 
				size_nvec ++ ; 
			}
		}
	}

	int i = vec.size()-1 ; 
    int ni = size_nvec ; 
    if(ni < i){
    	double m = mean(vec, (ni+1)-1, i) ; 
    	for (int k = (ni+1)-1 ; k <= i ; k++) {
			nvec[k] = m ; 
		}
    }
	return nvec ; 

}

std::vector<double> which(std::vector<double> nvec) {
	/* Return the index of the data to observe */
	std::vector<double> index ; 
	for (int i = 0; i < nvec.size(); i++) {
		if (nvec[i] >= 0.3 && nvec[i] <= 0.7) {
			index.push_back(i) ; 
		}
	}
	return index ; 
}

std::vector<double> fit(std::vector<double> time, std::vector<double> normalized_val) {
	std::vector<double> smooth = smooth_mean(normalized_val, 2) ; 	
	std::vector<double> res = which(smooth) ; 

	std::vector<double> x; 
	std::vector<double> y; 
	
	for (int i = 0 ; i < res.size(); i ++) {
		x.push_back(time[res[i]]) ; 
		y.push_back(normalized_val[res[i]]) ; 
	}

	Linear_regression L ; 
    std::vector<double> resL = L.linear_regression(x,y,x.size()) ;

    return resL ; 
}

double get_halftime(std::vector<double> resL) {
	return (0.5-resL[1])/resL[0] ; 
}

int main() {
	
	std::vector<double> time{0,0.095278,0.19056,0.28583,0.38111,0.47639,0.57167,0.66694,0.76222,0.8575,0.95278,1.0481,1.1433,1.2386,1.3339,1.4292,1.5244,1.6197,1.715,1.8103,1.9056,2.0008,2.0961,2.1914,2.2867,2.3819,2.4772,2.5725,2.6678,2.7631,2.8583,2.9536,3.0489,3.1442,3.2394,3.33,3.4253,3.5206,3.6158,3.7111,3.8064,3.9017,3.9969,4.0922,4.1875,4.2828,4.3781,4.4733,4.5686,4.6639,4.7592,4.8544,4.9497,5.045,5.1403,5.2356,5.3308,5.4261,5.5214,5.6167,5.7119,5.8072,5.9025,5.9978,6.0931,6.1883,6.2836,6.3789,6.4742,6.5694,6.6647,6.76,6.8553,6.9506,7.0458,7.1411,7.2364,7.3317,7.4269,7.5222,7.6175,7.7128,7.8081,7.9033,7.9986,8.0939,8.1892,8.2844,8.3797,8.475,8.5703,8.6656,8.7608,8.8561,8.9514,9.0467,9.1419,9.2372,9.3325,9.4278,9.5231,9.6183,9.7136,9.8089,9.9042,9.9994,10.095,10.19,10.285,10.381,10.476,10.571,10.666,10.762,10.857,10.952,11.048,11.143,11.238,11.333,11.429,11.524,11.619,11.714,11.81,11.905,12,12.096,12.191,12.286,12.381,12.477,12.572,12.667,12.762,12.858,12.953,13.048,13.144,13.239,13.334,13.429,13.525,13.62,13.715,13.811,13.906,14.001,14.096,14.192,14.287,14.382,14.477,14.573,14.668,14.763,14.859,14.954,15.049,15.144,15.24,15.335,15.43,15.526,15.621,15.716,15.811,15.907,16.002,16.097,16.193,16.288,16.383,16.478,16.574,16.669,16.764,16.859,16.955,17.05,17.145,17.241,17.336,17.431,17.526,17.622,17.717,17.812,17.908,18.003,18.098,18.193,18.289,18.384,18.479,18.574,18.67,18.765,18.86,18.956,19.051,19.146,19.241,19.337,19.432,19.527,19.622,19.718,19.813,19.908,20.004,20.099,20.194,20.289,20.385,20.48,20.575,20.671,20.766,20.861,20.956,21.052,21.147} ; 
	std::vector<double> val{0.0765924,0.0713543,0.072114,0.0719141,0.0791315,0.0951657,0.140549,0.233096,0.374385,0.517714,0.626694,0.703387,0.739294,0.767304,0.791815,0.793954,0.806949,0.819385,0.824803,0.8339,0.836639,0.837598,0.850014,0.851254,0.86039,0.852753,0.868947,0.868527,0.874425,0.874385,0.883442,0.88986,0.88954,0.905074,0.905414,0.915091,0.929205,0.924367,0.931345,0.927646,0.929225,0.930425,0.935183,0.937163,0.938062,0.942781,0.948319,0.955376,0.957695,0.955556,0.952457,0.960914,0.962434,0.962833,0.960214,0.969731,0.967052,0.973949,0.976888,0.980007,0.982366,0.967592,0.985905,0.982766,0.992923,0.990663,0.989804,0.986125,0.987944,0.994622,0.9994,1.00142,0.989944,0.997961,0.994842,0.994042,1.00304,0.99936,0.995402,0.996881,0.99884,1.0078,1.0074,1.00092,1.00004,0.998381,1.00594,0.995822,1.00824,0.998501,1.00838,1.00858,1.01761,1.01356,1.01501,1.01429,1.01038,1.01405,1.01753,1.01002,1.02105,1.03149,1.01683,1.02123,1.02111,1.01152,1.01196,1.01981,1.00834,1.02661,1.02371,1.0088,1.01835,1.02309,1.02177,1.02747,1.02331,1.02993,1.01601,1.03393,1.03379,1.03155,1.02955,1.04396,1.03333,1.02029,1.03963,1.03373,1.03361,1.02777,1.03197,1.03349,1.02037,1.03023,1.03279,1.03527,1.01901,1.02977,1.03407,1.02601,1.03291,1.02395,1.04099,1.03691,1.03247,1.03511,1.03987,1.03695,1.03723,1.03931,1.03509,1.02853,1.02185,1.02891,1.02857,1.02173,1.03439,1.02259,1.02363,1.02089,1.03371,1.02865,1.02261,1.02281,1.02725,1.03439,1.02983,1.03869,1.02857,1.03543,1.04408,1.04155,1.03071,1.03727,1.02555,1.03001,1.02703,1.03325,1.02083,1.01547,1.02083,1.03157,1.03319,1.03557,1.02811,1.03997,1.02951,1.03145,1.01989,1.03217,1.02767,1.02555,1.02161,1.03957,1.03165,1.02379,1.01917,1.01675,1.03073,1.03095,1.03691,1.04344,1.03345,1.03495,1.03879,1.02879,1.03863,1.02691,1.03517,1.03439,1.03635,1.03321,1.03795,1.03811,1.02989,1.03249,1.03273,1.03635,1.03221,1.02603,1.03131,1.03119,1.03513} ; 
	
	std::vector<double> res = fit(time, val) ; 
	double half = get_halftime(res) ; 
	std::cout << "The Half time is : " << half << std::endl ; 
	
	return 0 ; 
}