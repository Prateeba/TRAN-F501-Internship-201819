import math
import random 
import numpy as np 
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.font_manager import FontProperties
from scipy.interpolate import make_interp_spline, BSpline


with open("../results/second_nucleation/all.txt", "r") as f:
	data = f.readlines()

all = []
time = [0.000000,0.100000,0.200000,0.300000,0.400000 ,0.500000 ,0.600000 ,0.700000, 0.800000, 0.900000 ,1.000000 ,1.100000 ,1.200000 ,1.300000 ,1.400000 ,1.500000 ,1.600000 ,1.700000 ,1.800000 ,1.900000 ,2.000000 ,2.100000 ,2.200000 ,2.300000, 2.400000, 2.500000 ,2.600000 ,2.700000 ,2.800000 ,2.900000 ,3.000000, 3.100000, 3.200000 ,3.300000, 3.400000 ,3.500000, 3.600000 ,3.700000, 3.800000 ,3.900000 ,4.000000 ,4.100000 ,4.200000, 4.300000 ,4.400000 ,4.500000 ,4.600000 ,4.700000 ,4.800000 ,4.900000 ,5.000000, 5.100000 ,5.200000, 5.300000, 5.400000 ,5.500000, 5.600000 ,5.700000 ,5.800000 ,5.900000 ,6.000000 ,6.100000, 6.200000, 6.300000 ,6.400000 ,6.500000 ,6.600000, 6.700000 ,6.800000 ,6.900000, 7.000000 ,7.100000 ,7.200000 ,7.300000 ,7.400000 ,7.500000, 7.600000 ,7.700000 ,7.800000, 7.900000 ,8.000000 ,8.100000 ,8.200000 ,8.300000 ,8.400000, 8.500000 ,8.600000, 8.700000 ,8.800000, 8.900000, 9.000000 ,9.100000 ,9.200000 ,9.300000 ,9.400000 ,9.500000 ,9.600000, 9.700000 ,9.800000 ,9.900000, 10.000000 ,10.100000 ,10.200000 ,10.300000 ,10.400000 ,10.500000 ,10.600000 ,10.700000 ,10.800000 ,10.900000 ,11.000000 ,11.100000 ,11.200000 ,11.300000 ,11.400000 ,11.500000, 11.600000 ,11.700000 ,11.800000 ,11.900000 ,12.000000 ,12.100000 ,12.200000 ,12.300000 ,12.400000, 12.500000 ,12.600000 ,12.700000 ,12.800000, 12.900000, 13.000000, 13.100000 ,13.200000, 13.300000, 13.400000, 13.500000, 13.600000, 13.700000, 13.800000, 13.900000, 14.000000, 14.100000, 14.200000, 14.300000, 14.400000, 14.500000, 14.600000, 14.700000, 14.800000, 14.900000, 15.000000, 15.100000, 15.200000, 15.300000, 15.400000, 15.500000, 15.600000, 15.700000, 15.800000, 15.900000, 16.000000, 16.100000, 16.200000, 16.300000, 16.400000, 16.500000, 16.600000, 16.700000, 16.800000, 16.900000, 17.000000, 17.100000, 17.200000, 17.300000, 17.400000, 17.500000, 17.600000, 17.700000, 17.800000, 17.900000, 18.000000, 18.100000, 18.200000, 18.300000, 18.400000, 18.500000, 18.600000, 18.700000, 18.800000, 18.900000, 19.000000, 19.100000, 19.200000, 19.300000, 19.400000, 19.500000, 19.600000, 19.700000, 19.800000, 19.900000, 20.000000, 20.100000, 20.200000, 20.300000, 20.400000, 20.500000, 20.600000, 20.700000, 20.800000, 20.900000, 21.000000, 21.100000, 21.200000, 21.300000, 21.400000, 21.500000, 21.600000, 21.700000, 21.800000, 21.900000, 22.000000, 22.100000, 22.200000, 22.300000, 22.400000, 22.500000, 22.600000, 22.700000, 22.800000, 22.900000, 23.000000, 23.100000, 23.200000, 23.300000, 23.400000, 23.500000, 23.600000, 23.700000, 23.800000, 23.900000, 24.000000, 24.100000, 24.200000, 24.300000, 24.400000, 24.500000, 24.600000, 24.700000, 24.800000, 24.900000, 25.000000]
#time = [0.000000,1.000000,2.000000,3.000000,4.000000,5.000000,6.000000,7.000000,8.000000,9.000000,10.000000,11.000000,12.000000,13.000000,14.000000,15.000000,16.000000,17.000000,18.000000,19.000000,20.000000]
#time = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
for i in range (0, len(data)) : 
	tmp = data[i].strip().split(" ")   
	y_axis = [float(i) for i in tmp]
	all.append(y_axis)
	plt.step(time, y_axis, label='Realization '+str(i+1))

mean = []
for i in range(0, len(all[0])) : 
	tmp = 0 
	for j in range(len(all)) : 
		tmp += all[j][i]
	mean.append(tmp/(len(all)))

xnew = np.linspace(min(time), max(time), 1000)
spl = make_interp_spline(time, mean, k=3)  # type: BSpline
power_smooth = spl(xnew)

plt.plot(xnew, power_smooth, 'k--', label='stochastic mean')

#plt.plot(time, mean,'b--', label='mean')

plt.title('Sample trajectory of the secondary nucleation model with Amylofit\'s fitted parameters  ', color='b')
fontP = FontProperties()
fontP.set_size('x-small')
plt.legend(loc='upper center', prop=fontP, bbox_to_anchor=(0.5, 1.00),ncol=3, fancybox=True, shadow=True)
plt.ylabel("Number of molecules")
plt.xlabel("Time (h)")
plt.savefig('../results/second_nucleation/all.png')